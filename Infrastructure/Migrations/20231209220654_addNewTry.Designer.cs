// <auto-generated />
using System;
using Infrastructure.Database.MySQLDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RealDatabase))]
    [Migration("20231209220654_addNewTry")]
    partial class addNewTry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Animal.AnimalModel", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId");

                    b.ToTable("Animals");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AnimalModel");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("5ffb0c6a-1364-4f83-b9e6-c9db266c03ff"),
                            Name = "Lion"
                        },
                        new
                        {
                            AnimalId = new Guid("20d92f10-32bb-4f3c-b984-3610ac354d3c"),
                            Name = "Tiger"
                        },
                        new
                        {
                            AnimalId = new Guid("de8fb6a3-636c-400b-83c7-cf9a8e4bf42f"),
                            Name = "Elephant"
                        });
                });

            modelBuilder.Entity("Domain.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3022c044-f477-40b8-a8b6-3b36014b85cf"),
                            UserName = "User1",
                            UserPassword = "Password1"
                        },
                        new
                        {
                            UserId = new Guid("698fe0ba-ef7d-4dec-af9b-efa2d59ede6c"),
                            UserName = "User2",
                            UserPassword = "Password2"
                        },
                        new
                        {
                            UserId = new Guid("468d4c1b-0806-4f5a-b60b-75fe587fc399"),
                            UserName = "User3",
                            UserPassword = "Password3"
                        });
                });

            modelBuilder.Entity("Domain.Models.UserAnimal.UserAnimalModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "AnimalId");

                    b.HasIndex("AnimalId");

                    b.ToTable("UserAnimals");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3022c044-f477-40b8-a8b6-3b36014b85cf"),
                            AnimalId = new Guid("5ffb0c6a-1364-4f83-b9e6-c9db266c03ff")
                        },
                        new
                        {
                            UserId = new Guid("3022c044-f477-40b8-a8b6-3b36014b85cf"),
                            AnimalId = new Guid("20d92f10-32bb-4f3c-b984-3610ac354d3c")
                        },
                        new
                        {
                            UserId = new Guid("698fe0ba-ef7d-4dec-af9b-efa2d59ede6c"),
                            AnimalId = new Guid("20d92f10-32bb-4f3c-b984-3610ac354d3c")
                        },
                        new
                        {
                            UserId = new Guid("468d4c1b-0806-4f5a-b60b-75fe587fc399"),
                            AnimalId = new Guid("de8fb6a3-636c-400b-83c7-cf9a8e4bf42f")
                        });
                });

            modelBuilder.Entity("Domain.Models.Dog", b =>
                {
                    b.HasBaseType("Domain.Models.Animal.AnimalModel");

                    b.HasDiscriminator().HasValue("Dog");
                });

            modelBuilder.Entity("Domain.Models.UserAnimal.UserAnimalModel", b =>
                {
                    b.HasOne("Domain.Models.Animal.AnimalModel", "Animal")
                        .WithMany("UserAnimals")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User.UserModel", "User")
                        .WithMany("UserAnimals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Animal.AnimalModel", b =>
                {
                    b.Navigation("UserAnimals");
                });

            modelBuilder.Entity("Domain.Models.User.UserModel", b =>
                {
                    b.Navigation("UserAnimals");
                });
#pragma warning restore 612, 618
        }
    }
}
